// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  UserAlbumLikes   UserAlbumLikes[]
  UserAlbumRatings UserAlbumRatings[]
  FollowersList    FollowersList[]
  ReviewLikes      ReviewLikes[]
  AlbumReviews     AlbumReviews[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AlbumReviews {
  id          String        @unique @default(cuid())
  albumId     String
  userId      String
  userImage   String
  username    String
  text        String        @db.VarChar(4000)
  createdAt   DateTime      @default(now())
  likes       Int           @default(0)
  ReviewLikes ReviewLikes[]
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ReviewLikes {
  id          String       @unique @default(cuid())
  albumId     String
  userId      String
  reviewId    String
  isLike      Boolean
  albumReview AlbumReviews @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([reviewId])
}

model FollowersList {
  id              String   @unique @default(cuid())
  userId          String
  followingUserId String
  isFollowing     Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserAlbumLikes {
  id         String   @unique @default(cuid())
  albumId    String
  userId     String
  isLike     Boolean
  albumImage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserAlbumRatings {
  id        String   @unique @default(cuid())
  albumId   String
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
